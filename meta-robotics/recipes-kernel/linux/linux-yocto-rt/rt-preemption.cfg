# =================================================================
# Real-Time Preemption (PREEMPT_RT) Configuration
# =================================================================
# This configuration enables hard real-time capabilities in the Linux
# kernel, essential for robotics applications requiring deterministic
# timing and low-latency response.
#
# Real-time requirements in robotics:
# - Motor control loops (typically 1-10 kHz update rates)
# - Sensor data acquisition at precise intervals
# - Safety system responses with guaranteed timing
# - Communication protocol timing (CAN, EtherCAT, etc.)
# - Audio processing for speech recognition/synthesis
# - High-frequency servo control
#
# PREEMPT_RT benefits:
# - Deterministic interrupt latency (< 100 microseconds typical)
# - Preemptible kernel (interrupts can preempt kernel code)
# - Priority inheritance for mutexes (prevents priority inversion)
# - Real-time scheduling policies (SCHED_FIFO, SCHED_RR)
# - Reduced worst-case latency for critical tasks
#
# Performance considerations:
# - Slightly higher average latency for non-RT tasks
# - Increased context switching overhead
# - More complex debugging due to preemption
# - Essential for safety-critical robotics applications
# =================================================================

# Enable PREEMPT_RT real-time patches
# This is the main configuration that enables the real-time kernel
# Converts most kernel spinlocks to mutexes for better preemptibility
CONFIG_PREEMPT_RT=y

# Enable kernel preemption support
# Allows higher priority tasks to interrupt kernel execution
# Essential for maintaining real-time responsiveness
CONFIG_PREEMPTION=y

# Preemption count tracking
# Tracks preemption state for debugging and proper operation
# Required for PREEMPT_RT to function correctly
CONFIG_PREEMPT_COUNT=y

# Preemptible RCU (Read-Copy-Update)
# Makes RCU operations preemptible to reduce latency
# RCU is used extensively in the kernel for lock-free data structures
CONFIG_PREEMPT_RCU=y

# High resolution timers
# Provides sub-jiffy timer resolution (typically microsecond precision)
# Essential for precise timing in real-time applications
# Enables hrtimers API for high-precision timing
CONFIG_HIGH_RES_TIMERS=y
