# =================================================================
# RASPBERRY PI 3 ROBOTICS BUILD CONFIGURATION
# =================================================================
# This configuration is optimized specifically for Raspberry Pi 3
# hardware with robotics applications requiring computer vision and
# wireless connectivity.
#
# Key features enabled:
# - Real-time kernel support for deterministic timing
# - Hardware interfaces: GPIO, I2C, SPI, UART, PWM
# - Camera interface (CSI) for computer vision
# - Wi-Fi 802.11n and Bluetooth 4.1 connectivity
# - VideoCore IV GPU for hardware acceleration
# - Hardware video encoding/decoding (H.264)
# - Development tools and SSH access
#
# To use this configuration:
# 1. Copy to build directory: cp local.conf build/conf/local.conf
# 2. Customize as needed for your specific robotics application
# 3. Remove debug features for production deployment
# =================================================================

# =================================================================
# MACHINE CONFIGURATION
# =================================================================
# Set the target hardware platform to Raspberry Pi 3 robotics
MACHINE ?= "rpi3-robotics"

# =================================================================
# DISTRIBUTION CONFIGURATION
# =================================================================
# Use Poky distribution (default Yocto reference distribution)
DISTRO ?= "poky"

# =================================================================
# BUILD DIRECTORIES
# =================================================================
# Configure shared state and download directories for build caching
# Adjust these paths as needed for your development environment
DL_DIR ?= "${TOPDIR}/downloads"
SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

# =================================================================
# PARALLEL BUILD CONFIGURATION
# =================================================================
# Configure parallel builds based on your host system capabilities
# Use dynamic detection for better performance
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

# =================================================================
# PACKAGE MANAGEMENT
# =================================================================
# Use RPM for package management (alternatively: deb, ipk, or tar)
PACKAGE_CLASSES ?= "package_rpm"

# =================================================================
# IMAGE FEATURES FOR DEVELOPMENT
# =================================================================
# Enable features useful for robotics development and testing
# Remove or comment out debug features for production builds
EXTRA_IMAGE_FEATURES ?= "tools-debug tools-sdk ssh-server-openssh package-management"

# =================================================================
# GPU MEMORY CONFIGURATION
# =================================================================
# GPU memory configuration is handled in machine conf file
# (rpi3-robotics.conf configures GPU memory allocation)

# =================================================================
# HARDWARE INTERFACES
# =================================================================
# Hardware interface configuration is handled in machine conf file
# (rpi3-robotics.conf configures UART, I2C, SPI, camera interfaces)

# =================================================================
# KERNEL CONFIGURATION
# =================================================================
# Kernel configuration is handled in machine conf file
# (rpi3-robotics.conf configures RT kernel and features)

# =================================================================
# WIRELESS AND SYSTEMD CONFIGURATION
# =================================================================
# Wireless, systemd, and graphics configuration is handled in machine conf file
# (rpi3-robotics.conf configures Wi-Fi, Bluetooth, systemd, OpenGL support)

# =================================================================
# CAMERA AND COMPUTER VISION
# =================================================================
# Configure OpenCV with proper features for RPi3
PACKAGECONFIG_pn-opencv4 = "python3 eigen jpeg png tiff v4l libv4l"

# Add camera utilities
IMAGE_INSTALL:append = " \
    v4l-utils \
    media-ctl \
    "

# =================================================================
# USER CONFIGURATION
# =================================================================
# Set root password for development (change for production!)
EXTRA_USERS_PARAMS = "usermod -P robotics root;"

# Create a robotics user account
EXTRA_USERS_PARAMS += "useradd -m -s /bin/bash robotics; usermod -P robotics robotics; usermod -aG sudo,gpio,i2c,spi robotics;"

# =================================================================
# FILESYSTEM CONFIGURATION
# =================================================================
# Configure appropriate image size for SD card
IMAGE_ROOTFS_SIZE ?= "3072000"
IMAGE_FSTYPES = "rpi-sdimg"

# =================================================================
# SECURITY CONFIGURATION
# =================================================================
# PAM configuration is handled in machine conf file
# (rpi3-robotics.conf configures PAM support)

# =================================================================
# DISK SPACE MONITORING
# =================================================================
# Monitor disk space during build to prevent build failures
BB_DISKMON_DIRS ??= "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

# =================================================================
# OPTIMIZATION FLAGS
# =================================================================
# The machine configuration handles CPU optimization automatically
# RPi3 uses ARM Cortex-A53 which is handled by raspberrypi3-64.conf

# =================================================================
# DEVELOPMENT FEATURES
# =================================================================
# Remove these lines for production builds

# Enable source packages for debugging
INHERIT += "archiver"
ARCHIVER_MODE[src] = "original"

# Enable build statistics collection
INHERIT += "buildstats"

# Enable build history for package analysis
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT = "1"

# =================================================================
# BUILD SIZE OPTIMIZATION
# =================================================================
# Reduce build size by excluding debug info and unnecessary packages
INHIBIT_PACKAGE_STRIP = "0"
INHIBIT_PACKAGE_DEBUG_SPLIT = "1"
INHIBIT_SYSROOT_STRIP = "0"

# Remove locale data to save space (keep only English)
IMAGE_LINGUAS = "en-us"

# Disable heavy optional features (keep opengl for hardware acceleration)
DISTRO_FEATURES:remove = "x11 wayland vulkan"

# =================================================================
# PRODUCTION DEPLOYMENT NOTES
# =================================================================
# For production deployment, modify this configuration:
# 1. Remove "debug-tweaks" from EXTRA_IMAGE_FEATURES
# 2. Remove development tools and packages
# 3. Remove or change EXTRA_USERS_PARAMS
# 4. Consider read-only root filesystem
# 5. Enable security hardening features
# 6. Remove archiver, buildstats, buildhistory
# 7. Optimize IMAGE_ROOTFS_SIZE for your application
# 8. Consider signed images and secure boot
# =================================================================
