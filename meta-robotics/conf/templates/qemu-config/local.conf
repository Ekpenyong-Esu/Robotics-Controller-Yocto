# This file has been removed as it is no longer necessary.
# =================================================================
# Force root password for QEMU test images (overrides recipe)
INHERIT += "extrausers"
EXTRA_USERS_PARAMS = "usermod -p '$$5$$EmQEYS3dCcr3ZAgi$$MeRTGkaTiYrL4lTiFpXq0UX2Fpvj0YFXOFZOEqCnhQ3' root;"
# QEMU ROBOTICS EMULATION BUILD CONFIGURATION
# =================================================================
# This configuration is optimized for QEMU virtual machine development
# and testing of robotics applications without physical hardware.
#
# Key features:
# - Virtual ARM64 machine emulation
# - Development and debugging tools
# - Network connectivity for remote access
# - Software testing environment
# - CI/CD pipeline compatibility
#
# Use cases:
# - Algorithm development and testing
# - Software integration testing
# - Multi-platform compatibility verification
# - Training and educational purposes
# - CI/CD automated testing
# =================================================================

# =================================================================
# MACHINE SELECTION
# =================================================================
# Target QEMU ARM64 virtual machine for robotics emulation
# Use standard QEMU machine - custom features in machine config files
# Use custom machine from meta-robotics layer
MACHINE ?= "qemu-robotics"

# =================================================================
# DEVELOPMENT FEATURES
# =================================================================
# Enable comprehensive development features for testing
# Use EXTRA_IMAGE_FEATURES for local.conf
EXTRA_IMAGE_FEATURES ?= "ssh-server-openssh tools-debug tools-profile package-management"


DISTRO_FEATURES:append = " usrmerge"
# =================================================================
# QEMU EMULATION SETTINGS
# =================================================================
# Configure QEMU runtime options for development
# Use QB_OPT_APPEND for additional QEMU options
QB_OPT_APPEND = "-nographic -serial mon:stdio"

# =================================================================
# QEMU HOST INTEGRATION
# =================================================================
# Enable SDL support for QEMU graphics (if needed)
# Useful for applications that require display testing
# By default native qemu will build with a builtin VNC server where graphical output can be
# seen. The line below enables the SDL UI frontend too.
PACKAGECONFIG:append:pn-qemu-system-native = " sdl"


# =================================================================
# PACKAGE MANAGEMENT
# =================================================================
# Use RPM for consistent package management across platforms
PACKAGE_CLASSES ?= "package_rpm"

# =================================================================
# BUILD PERFORMANCE OPTIMIZATION
# =================================================================
# Optimize build performance for development workstations
# Reduce parallelism to avoid race conditions and resource exhaustion
BB_NUMBER_THREADS ?= "4"
PARALLEL_MAKE ?= "-j 4"


# =================================================================
# ESSENTIAL DEVELOPMENT TOOLS ONLY (streamlined for robotics emulation)
# =================================================================
IMAGE_INSTALL:append = " openssh-sftp-server bash"

# Optional: Uncomment below lines to add advanced debugging tools if needed
# IMAGE_INSTALL:append = " strace gdbserver valgrind perf "

# =================================================================
# QEMU-SPECIFIC OPTIMIZATIONS
# =================================================================
# Additional configurations for QEMU development environment

# systemd and PAM configuration is handled in machine conf file
# (qemu-robotics.conf configures systemd and security features)

# Runtime options for development (not machine-specific)
QB_OPT_APPEND = "-nographic -serial mon:stdio"

# =================================================================
# ROBOTICS APPLICATION TESTING
# =================================================================
# Configure for robotics software testing in emulation

# Enable OpenCV only if specifically needed for computer vision
# PACKAGECONFIG_pn-opencv4 = "python3 eigen jpeg png tiff"


# =================================================================
# SYSTEMD CONFIGURATION
# =================================================================
# systemd configuration is handled in machine conf file
# (qemu-robotics.conf configures systemd as init manager)

# =================================================================
# FILESYSTEM AND STORAGE CONFIGURATION
# =================================================================
# Configure appropriate image size for QEMU
IMAGE_ROOTFS_SIZE ?= "4096000"
IMAGE_FSTYPES = "ext4 tar.xz"

# Enable additional filesystem support
IMAGE_INSTALL:append = " \
    e2fsprogs \
    e2fsprogs-resize2fs \
    "

# =================================================================
# SECURITY CONFIGURATION FOR DEVELOPMENT
# =================================================================
# PAM configuration is handled in machine conf file
# (qemu-robotics.conf configures PAM support)

# # Set development password (REMOVE FOR PRODUCTION)
# INHERIT += "extrausers"
# # Use a secure password hash for development (remove for production)
# EXTRA_USERS_PARAMS = "usermod -P qemu root;"
# NOTE: EXTRA_USERS_PARAMS moved to individual image recipes to avoid conflicts


# =================================================================
# QEMU USAGE INSTRUCTIONS
# =================================================================
# To run the built image:
# 1. Build: bitbake core-image-base (or your custom image)
# 2. Run: runqemu qemuarm64 core-image-base
# 3. For SSH access: runqemu qemuarm64 core-image-base slirp
# 4. SSH to localhost:2222: ssh -p 2222 root@localhost
#
# Alternative run methods:
# - With graphics: runqemu qemuarm64 core-image-base qemuparams="-display gtk"
# - With more memory: runqemu qemuarm64 core-image-base qemuparams="-m 2048"
# - With KVM: runqemu qemuarm64 core-image-base kvm
#
# For network access from host:
# - QEMU provides NAT networking by default
# - SSH to localhost:2222 (port forwarding)
# - Or use 'slirp' option for user networking
# - Bridge networking requires host configuration
# =================================================================

# =================================================================
# PRODUCTION DEPLOYMENT NOTES
# =================================================================
# For production deployment, modify this configuration:
# 1. Remove "debug-tweaks" from EXTRA_IMAGE_FEATURES
# 2. Remove development tools and packages
# 3. Remove or change EXTRA_USERS_PARAMS
# 4. Reduce IMAGE_ROOTFS_SIZE for embedded targets
# 5. Remove unnecessary development packages
# 6. Enable security hardening features
# 7. Consider read-only root filesystem
# =================================================================

# =================================================================
# BUILD SIZE OPTIMIZATION
# =================================================================
# Reduce build size by excluding debug info and unnecessary packages
INHIBIT_PACKAGE_STRIP = "0"
INHIBIT_PACKAGE_DEBUG_SPLIT = "0"
INHIBIT_SYSROOT_STRIP = "0"

# Remove locale data to save space (keep only English)
IMAGE_LINGUAS = "en-us"

# Minimize kernel modules and drivers for QEMU only
KERNEL_FEATURES:remove = "features/netfilter/netfilter.scc"

# Force use of a supported kernel version for Kirkstone (prevents fetch errors)
PREFERRED_VERSION_linux-yocto-rt = "5.15%"
